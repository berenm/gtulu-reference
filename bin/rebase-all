#!/bin/bash

__checkpoint() {
  local c
  read -e -i Y -r -p 'continue? [Y/n] ' c
  [ "$c" == "Y" -o "$c" == "y" ] && return 0
  return 1
}

__confirm() {
  local c
  read -e -r -p '$ ' -i "$(echo $@ | sed -re 's@ @\ @g')" c
  [ ! -z "$c" ] && $c
  return $?
}

__inform() {
  echo "# $@"
  $@ &>/dev/null
}

__showlog() {
  echo "# git log --oneline --graph --decorate --topo-order --shortstat $@"
  git log --oneline --graph --decorate --topo-order --shortstat $@
}

__fetch() {
  __inform git stash
  __inform git fetch origin
  __inform git checkout -B $1 origin/$1
  __inform git stash pop

  echo "# git status --short"
  git status --short
  git diff
}

__commit() {
  __inform git add -u .

  [ -z "$(git commit --short)" ] && return 0
  __confirm git commit
}

__push() {
  ( [ ! -z "$(git diff $1..origin/$1)" ] || [ ! "$(git rev-parse $1^)" == "$(git rev-parse origin/$1^)" ] ) && __confirm git push origin $1 --force
  __inform git checkout -B $1 origin/$1
}

__update() {
  __inform cd $1/$3

  echo $2 | grep origin && remote=$2 || remote=origin/$2/$3
  upstream=$(git rev-parse --short $remote)

  __fetch $1/$3
  __commit
  __inform git checkout -B upstream $upstream
  __inform git checkout -

  __showlog $1/$3 origin/$1/$3
  __confirm git checkout -B upstream $upstream
  __inform git checkout -

  __confirm git rebase --preserve-merges --onto $remote upstream $1/$3 --interactive

  __showlog $1/$3 origin/$1/$3
  __push $1/$3

  cd - &>/dev/null
}


__cherry_picks() {
  head=$(git rev-parse --short HEAD)
  upstream=$(git log --oneline | grep 'Merge' | awk '{ print $1 }' | head -1)
  cherry_picks=$(git log --oneline $upstream..$head | awk '{ print $1 }' | tac | tr $'\n' ' ')
  echo $cherry_picks
}


__update_core() {
  __inform cd $1/$3

  cherry_pick=$(__cherry_picks)

  __fetch $1/$3
  __inform git checkout -B $1/$3 origin/$2/$3
  __inform git checkout -B $1/comp origin/$1/comp
  __inform git checkout -
  __inform git merge $1/comp

  [ ! -z "$cherry_pick" ] && __inform git cherry-pick $cherry_pick

  __showlog $1/$3 origin/$1/$3
  __push $1/$3

  cd - &>/dev/null
}


cd $(dirname $0)/..

if [ ! "$1" == "--core" ]
then
  __inform cd gl/2.1
  __fetch gl/2.1
  __commit
  __showlog gl/2.1 origin/gl/2.1

  [ ! -z "$(git diff gl/2.1..origin/gl/2.1)" ] && __confirm git push origin gl/2.1 --force
  __inform git checkout -B gl/2.1 origin/gl/2.1
  cd - &>/dev/null

  __update gl/3.0 origin/gl/2.1 comp
  __update gl/3.1 gl/3.0 comp
  __update gl/3.2 gl/3.1 comp
  __update gl/3.3 gl/3.2 comp
  __update gl/4.0 gl/3.3 comp
  __update gl/4.1 gl/4.0 comp
  __update gl/4.2 gl/4.1 comp
  __update gl/4.3 gl/4.2 comp
fi

__update gl/3.0 origin/gl/3.0/comp core
__update_core gl/3.1 gl/3.0 core
__update_core gl/3.2 gl/3.1 core
__update_core gl/3.3 gl/3.2 core
__update_core gl/4.0 gl/3.3 core
__update_core gl/4.1 gl/4.0 core
__update_core gl/4.2 gl/4.1 core
__update_core gl/4.3 gl/4.2 core
