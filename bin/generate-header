#!/usr/bin/python

import os
import sys
from renamable import Renamable
import gtuluref as gtu


class Function(Renamable):
  def __init__(self, name):
    self.name = name
    super(Function, self).__init__(['gl'])

compatapi = {}
compatcall = {}

if len(sys.argv) < 2:
  versions = ['2.1', '3.0', '3.1', '3.2', '3.3', '4.0', '4.1', '4.2', '4.3']
else:
  versions = sys.argv[1:]

for v in versions:
  if v == '2.1':
    comps = ['']
  else:
    comps = ['core', 'comp']

  for c in comps:
    functionapi = {}
    apisource = gtu.list(v, 'functions.api')
    with open(apisource, 'r') as apis:
      for a in apis:
        f = a.split('(')[0]
        if ' ' in f:
          f = f.split(' ')[-1]
        functionapi[f] = a.strip()

    functioncall = {}
    callsource = gtu.list(v, 'functions.call')
    with open(callsource, 'r') as calls:
      for a in calls:
        functioncall[a.split('(')[0]] = a.strip()

    if v == '2.1':
      compatapi = functionapi
      compatcall = functioncall

    functions = os.listdir(gtu.ref(v, c, 'function'))

    target = gtu.api(v, c, 'gtulu')
    if not os.path.exists(target):
      os.makedirs(target)

    target = gtu.api(v, c, 'gtulu/types.h')
    with open(target, 'w') as output:
      print >>output, '''\
#ifndef __GTULU_TYPES_H__
#define __GTULU_TYPES_H__

#include <boost/config.hpp>
#include <cstdint>

typedef unsigned int     GLenum;
typedef unsigned char    GLboolean;
typedef unsigned int     GLbitfield;
typedef signed char      GLbyte;
typedef short            GLshort;
typedef int              GLint;
typedef int              GLsizei;
typedef unsigned char    GLubyte;
typedef unsigned short   GLushort;
typedef unsigned int     GLuint;
typedef unsigned short   GLhalf;
typedef float            GLfloat;
typedef float            GLclampf;
typedef double           GLdouble;
typedef double           GLclampd;
typedef void             GLvoid;
typedef char             GLchar;
typedef ptrdiff_t        GLintptr;
typedef ptrdiff_t        GLsizeiptr;
typedef int64_t          GLint64;
typedef uint64_t         GLuint64;
typedef struct __GLsync* GLsync;
typedef void (* GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam);

#endif // ifndef __GTULU_TYPES_H__'''

    target = gtu.api(v, c, 'gtulu/api.hpp')
    with open(target, 'w') as output:
      print >>output, '''\
#ifndef __GTULU_OPENGL_API__
#define __GTULU_OPENGL_API__

#include <gtulu/types.h>

#ifdef __IN_GTULU_OPENGL_API__
#define GTULU_API_EXPORT BOOST_SYMBOL_EXPORT
#else
#define GTULU_API_EXPORT BOOST_SYMBOL_IMPORT
#endif

namespace gtulu {
namespace api {
'''
      for f in sorted(functions):
        print >>output, 'GTULU_API_EXPORT %s' % functionapi.get(f, compatapi.get(f, '')).replace(f, Function(f).new_name)

      print >>output, '''
} // namespace api
} // namespace gtulu

#endif /* __GTULU_OPENGL_API__ */'''

    target = gtu.api(v, c, 'gtulu/api.cpp')
    with open(target, 'w') as output:
      print >>output, '''\
#define __IN_GTULU_OPENGL_API__
#include <gtulu/api.hpp>
#include <gtulu/api.h>

namespace gtulu {
namespace api {
'''
      for f in sorted(functions):
        glapi = functionapi.get(f, compatapi.get(f, ''))
        glcall = functioncall.get(f, compatcall.get(f, ''))
        ret = glapi[:4] == 'void' and '' or 'return '

        print >>output, '%s { %s%s }' % (glapi.replace(f, Function(f).new_name).replace(';', ''), ret, glcall.replace('\n', ''))

      print >>output, '''\
\n} // namespace api
} // namespace gtulu'''

    target = gtu.api(v, c, 'gtulu/api.h')
    with open(target, 'w') as output:
      print >>output, '''\
#ifndef __GTULU_API_H__
#define __GTULU_API_H__

#include <gtulu/types.h>

#define GTULU_API_IMPORT BOOST_SYMBOL_IMPORT __attribute__((weak))

#ifdef __cplusplus
extern "C" {
#endif
'''
      for f in sorted(functions):
        print >>output, 'GTULU_API_IMPORT %s' % functionapi.get(f, compatapi.get(f, '/* %s */' % f))

      print >>output, '''
#ifdef __cplusplus
}
#endif

#endif /* __GTULU_API_H__ */'''
