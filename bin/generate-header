#!/usr/bin/python

import os
import sys
from renamable import Renamable
import gtuluref as gtu


class Function(Renamable):
  def __init__(self, name):
    self.name = name
    super(Function, self).__init__(['gl'])

compatapi = {}
compatcall = {}

if len(sys.argv) < 2:
  versions = ['2.1', '3.0', '3.1', '3.2', '3.3', '4.0', '4.1', '4.2', '4.3']
else:
  versions = sys.argv[1:]

for v in versions:
  if v == '2.1':
    comps = ['']
  else:
    comps = ['core'] #, 'comp']

  for c in comps:
    functionapi = {}
    apisource = gtu.list(v, 'functions.api')
    with open(apisource, 'r') as apis:
      for a in apis:
        f = a.split('(')[0]
        if ' ' in f:
          f = f.split(' ')[-1]
        functionapi[f] = a.strip()

    functioncall = {}
    callsource = gtu.list(v, 'functions.call')
    with open(callsource, 'r') as calls:
      for a in calls:
        functioncall[a.split('(')[0]] = a.strip()

    if v == '2.1':
      compatapi = functionapi
      compatcall = functioncall

    functions = {}
    for f in os.listdir(gtu.ref(v, c, 'function')):
      function = {}

      function_name = f
      function['gl_name'] = function_name
      function['gtulu_name'] = Function(function_name).new_name
      function['gtulu_ni_name'] = '__gtuluNI%s' % function['gl_name'][2:]

      function_decl = functionapi.get(f, '/* %s */' % function_name).replace(function_name, '%s')
      function['gl_decl'] = function_decl.strip(';') % function['gl_name']
      function['gtulu_decl'] = function_decl.strip(';') % function['gtulu_name']
      function['gtulu_ni_decl'] = function_decl.strip(';') % function['gtulu_ni_name']

      function['output'] = function_decl.split('%s')[0].strip()

      return_statement = function['output']
      if '*' in return_statement:
        function['default_return']  = 'nullptr'
        function['assign_variable'] = '%s const __r = ' % return_statement
        function['return_variable'] = '__r'
      elif return_statement != 'void':
        function['default_return']  = '%s()' % return_statement.replace('const', '')
        function['assign_variable'] = '%s const __r = ' % return_statement.replace('const', '')
        function['return_variable'] = '__r'
      else:
        function['default_return']  = ''
        function['assign_variable'] = ''
        function['return_variable'] = ''

      if function['gl_name'] == 'glGetError':
        function['check_error'] = ''
      else:
        function['check_error'] = 'api::__check_error();'

      function['gl_call'] = functioncall.get(f, '').strip(';')
      function['gl_call'] = '%(assign_variable)s %(gl_call)s; %(check_error)s return %(return_variable)s;' % function

      function['gtulu_ni_return'] = 'return %(default_return)s;' % function

      functions[function_name] = function



    target = gtu.api(v, c, 'gtulu')
    if not os.path.exists(target):
      os.makedirs(target)


    target = gtu.api(v, c, 'gtulu/types.h')
    with open(target, 'w') as o:
      print >>o, '''\
#ifndef __GTULU_TYPES_H__
#define __GTULU_TYPES_H__

#include <boost/config.hpp>
#include <cstdint>

typedef unsigned int     GLenum;
typedef unsigned char    GLboolean;
typedef unsigned int     GLbitfield;
typedef signed char      GLbyte;
typedef short            GLshort;
typedef int              GLint;
typedef int              GLsizei;
typedef unsigned char    GLubyte;
typedef unsigned short   GLushort;
typedef unsigned int     GLuint;
typedef unsigned short   GLhalf;
typedef float            GLfloat;
typedef float            GLclampf;
typedef double           GLdouble;
typedef double           GLclampd;
typedef void             GLvoid;
typedef char             GLchar;
typedef ptrdiff_t        GLintptr;
typedef ptrdiff_t        GLsizeiptr;
typedef int64_t          GLint64;
typedef uint64_t         GLuint64;
typedef struct __GLsync* GLsync;
typedef void (* GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam);

#endif // ifndef __GTULU_TYPES_H__'''



    target = gtu.api(v, c, 'gtulu/api.hpp')
    with open(target, 'w') as o:
      print >>o, '''\
#ifndef __GTULU_OPENGL_API__
#define __GTULU_OPENGL_API__

#include <gtulu/types.h>

#ifdef __IN_GTULU_OPENGL_API__
#define GTULU_API_EXPORT __attribute__ ((visibility ("default")))
#else
#define GTULU_API_EXPORT BOOST_SYMBOL_IMPORT
#endif

namespace gtulu {
namespace api {
'''
      for n,f in sorted(functions.items()):
        print >>o, 'GTULU_API_EXPORT %(gtulu_decl)s;' % f

      print >>o, '''
} // namespace api
} // namespace gtulu

#endif /* __GTULU_OPENGL_API__ */'''



    target = gtu.api(v, c, 'gtulu/api.h')
    with open(target, 'w') as o:
      print >>o, '''\
#ifndef __GTULU_API_H__
#define __GTULU_API_H__

#include <gtulu/types.h>

#define GTULU_API_EXPORT __attribute__ ((visibility ("default")))
#define GTULU_API_IMPORT BOOST_SYMBOL_IMPORT

#ifdef __cplusplus
extern "C" {
#endif
'''
      for n,f in sorted(functions.items()):
        print >>o, 'GTULU_API_IMPORT %(gl_decl)s;' % f

      print >>o, '''
#ifdef __cplusplus
}
#endif

#endif /* __GTULU_API_H__ */'''



    target = gtu.api(v, c, 'gtulu/api.cpp')
    with open(target, 'w') as o:
      print >>o, '''\
#define __IN_GTULU_OPENGL_API__
#include <gtulu/api.hpp>
#include <gtulu/api.h>
#include <gtulu/error.hpp>

namespace gtulu {
namespace api {
'''
      for n,f in sorted(functions.items()):
        print >>o, '%(gtulu_decl)s { %(gl_call)s }' % f

      print >>o, '''\
\n} // namespace api
} // namespace gtulu'''



    target = gtu.api(v, c, 'gtulu/api_ni.cpp')
    with open(target, 'w') as o:
      print >>o, '''\
#include <gtulu/api.h>
#include <gtulu/logging.hpp>

namespace gtulu {
namespace api {

#ifdef __cplusplus
extern "C" {
#endif
'''
      for n,f in sorted(functions.items()):
        print >>o, 'static %(gtulu_ni_decl)s { __warn() << "not implemented: %(gl_name)s"; %(gtulu_ni_return)s }' % f
        print >>o, 'GTULU_API_EXPORT __attribute__((weak, alias("%(gtulu_ni_name)s"))) %(gl_decl)s;' % f

      print >>o, '''
#ifdef __cplusplus
}
#endif

} // namespace api
} // namespace gtulu'''
