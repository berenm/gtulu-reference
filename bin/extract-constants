#!/usr/bin/python

from lxml import etree
import os
import sys
import re
import gtuluref as gtu
import yaml
import logging

from gtulu.parser.tm import TMParser
from gtulu.parser.spec import SpecParser
from gtulu import logger

log = logging.getLogger(__name__)

args = gtu.arguments()
TMParser(gtu.spec('gl.tm')).parse()
enums = SpecParser(gtu.spec('enum.spec')).parse()

if len(sys.argv) < 2:
  versions = ['2.1', '3.0', '3.1', '3.2', '3.3', '4.0', '4.1', '4.2', '4.3']
else:
  versions = sys.argv[1:]

for v in versions:
  comps = v == '2.1' and [''] or ['core', 'comp']

  for c in comps:
    for f in os.listdir(gtu.ref(v, c, 'constant')):
      with open(os.path.join(gtu.ref(v, c, 'constant'), f), 'w') as out:
        try:
          key = f.replace('GL_', '')
          if 'i' in key or 'n' in key:
            k = re.sub(r'(?:i|n)', str(0), key)
            e = dict(enums['enumerations'][k])
            e['values'] = [e['value']]
            del e['value']

            try:
              i = 1
              while True:
                k = re.sub(r'(?:i|n)', str(i), key)
                e['values'].append(enums['enumerations'][k]['value'])
                i = i + 1
            except KeyError:
              pass

            yaml.dump(e, out, default_flow_style=False)
          else:
            e = dict(enums['enumerations'][key])
            yaml.dump(e, out, default_flow_style=False)
        except KeyError, e:
          log.warn('key not found: %s' % e)


if len(sys.argv) < 2:
  versions = ['2', '3', '4', 'es2', 'es3']
else:
  versions = [ v.split('.')[0] for v in sys.argv[1:] ]

for version in versions:
  folder = os.path.join('list', 'gl%s' % version)
  if not os.path.exists(folder):
    os.makedirs(folder)

  csts = set()

  for f in os.listdir(gtu.man(version)):
    filename = gtu.man(version, f)

    if f.endswith(".xml"):
      tree = etree.parse(filename, parser=etree.XMLParser(recover=True))
      root = tree.getroot()

      constants = root.xpath('//constant')
      for c in constants:
        p = c.getparent()
        n = None

        text = etree.tostring(c, encoding='utf-8', method='text', with_tail=False).strip()
        if c.tail is None or len(c.tail.strip()) == 0:
          n = c.getnext()
        
        if n is not None and n.tag in ['emphasis', 'inlineequation']:
          n = etree.tostring(n, encoding='utf-8', method='text', with_tail=False).strip()
          if len(n) == 1:
            text = text + n

        csts.add(text)
        p.remove(c)

      constants = root.xpath('//refsect1[starts-with(@id, "parameters")]//constant')
      for c in constants:
        c.getparent().remove(c)
        csts.add(c.text)
        # print f, 'param', c.text

      constants = root.xpath('//refsect1[@id="description"]//constant')
      for c in constants:
        c.getparent().remove(c)
        csts.add(c.text)
        # print f, 'desc', c.text

      constants = root.xpath('//refsect1[@id="notes"]//constant')
      for c in constants:
        c.getparent().remove(c)
        csts.add(c.text)
        # print f, 'note', c.text

      constants = root.xpath('//refsect1[@id="examples"]//constant')
      for c in constants:
        c.getparent().remove(c)
        csts.add(c.text)
        # print f, 'example', c.text

      constants = root.xpath('//refsect1[@id="associatedgets"]//constant')
      for c in constants:
        c.getparent().remove(c)
        csts.add(c.text)
        # print f, 'get', c.text

      constants = root.xpath('//refsect1[@id="errors"]')
      for c in constants:
        c.getparent().remove(c)

        # print 'Errors'
        # print '---------------------'

        for p in c.xpath('para'):
          e = p.xpath('constant[1]/text()')

          if len(e) == 0:
            # print 'Other:'
            pass
          else:
            csts.add(e[0])
            # print '%s:' % e[0]

          # for n in p.xpath('.//text()[count(../text())=1]'):
            # n.getparent().text = '*' + n + '*'

          # print '  %s' % ' '.join([ s.strip() for s in etree.tostring(p, encoding='utf-8', method='text').splitlines() if len(s.strip()) > 0 ]).replace(' ,', ',')
          # print ''
        # print f, 'error', c.text

      constants = root.xpath('//constant/text()')
      for c in constants:
        print f, c
      # print f, [ etree.tostring(s) for s in root.xpath('//refsect1[@id="parameters"]//constant') ]

  output = open(gtu.list(version, 'constants'), 'w')
  for c in sorted(csts):
    print >>output, c