// -*- C++ -*-
// :cheetah --env --nobackup --iext=tcpp --oext=cpp --settings allowWhitespaceAfterDirectiveStartToken=True,cheetahVarStartToken='___',commentStartToken='// \#',directiveStartToken='// :',directiveEndToken=': //',multiLineCommentStartToken='/*\#',multiLineCommentEndToken='\#*/'

// :import os
// :import yaml
// :import gtuluref

// :set ___folder = gtuluref.ref(___GTULU_VERSION, ___getVar('GTULU_COMPAT', False) and 'comp' or 'core', 'function')
// :set ___functions = {}
// :for f in os.listdir(___folder):
// :  set ___functions[f] = yaml.load(file(os.path.join(___folder, f), 'r'))
// :end for

#define __IN_GTULU_OPENGL_API__
#include <gtulu/types.hpp>
#include <gtulu/notimp.hpp>
#include <gtulu/types.h>

extern "C" {

// :for f in sorted(___functions.values(), key=lambda x: '%s(%s)' % (x['gtu']['name'], ', '.join(['%(type)s %(name)s' % p for p in x['gtu']['params']]))):
// :  set ___parameters     = ', '.join(['%(type)s %(name)s' % p for p in ___f.gl.params])
// :  set ___return_type    = ___f.gl.return
// :  set ___function       = lambda x: '%s(%s)' % (f['gl']['name'], x)
// :  set ___ni_symbol_name = '__gtuluNI%s' % ___f.gl.name[2:]
// :  set ___ni_function    = lambda x: '%s(%s)' % (ni_symbol_name, x)
// :  set ___return_value   = ___return_type != 'void' and ('*' in ___return_type and 'nullptr' or '%s()' % ___return_type) or ''
static ___return_type           ___ni_function(___parameters);
GTULU_API_EXPORT ___return_type ___function(___parameters) __attribute__((weak, alias("___ni_symbol_name")));
static ___return_type ___ni_function(___parameters) {
  gtulu::api::__not_implemented("___function(___parameters)"); // :slurp

  return ___return_value;
} // :slurp

// :end for

}
