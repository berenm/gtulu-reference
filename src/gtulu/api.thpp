// -*- C++ -*-
// :cheetah --env --nobackup --iext=thpp --oext=hpp --settings allowWhitespaceAfterDirectiveStartToken=True,cheetahVarStartToken='___',commentStartToken='// \#',directiveStartToken='// :',directiveEndToken=': //',multiLineCommentStartToken='/*\#',multiLineCommentEndToken='\#*/'

// :import os
// :import yaml
// :import gtuluref

// :set (___functions,___constants,___categories) = gtuluref.load(___GTULU_VERSION, ___getVar('GTULU_COMPAT', False))

#ifndef __GTULU_OPENGL_API__
#define __GTULU_OPENGL_API__

#include <gtulu/types.hpp>

namespace gtulu {
  namespace cst {

    // :for c in ___constants:
    static constexpr gtu::constant ___c.name = ___c.value; // :slurp

    // :end for

  } // namespace cst

  namespace api {

    // :for f in ___functions:
    // :  if ___f.gtu.get('skip', False):
    // :    continue
    // :  end if
    // :  set ___parameters  = ', '.join(['%(type)s %(name)s' % p for p in ___f.gtu.params])
    // :  set ___return_type = ___f.gtu.return
    // :  set ___function       = lambda x: '%s(%s)' % (f['gtu']['name'], x)
    GTULU_API_EXPORT ___return_type ___function(___parameters); // :slurp

    // :end for

  } // namespace api
} // namespace gtulu

#endif /* __GTULU_OPENGL_API__ */
