// @cheetah --env --nobackup --iext=thpp --oext=hpp --settings allowWhitespaceAfterDirectiveStartToken=True,cheetahVarStartToken='__tpl_',commentStartToken='// \#',directiveStartToken='// @',directiveEndToken=' @//',multiLineCommentStartToken='/*\#',multiLineCommentEndToken='\#*/'

// @import os
// @import yaml
// @import gtuluref as gtu

// @set __tpl_folder = gtu.ref(__tpl_GTULU_VERSION, __tpl_getVar('GTULU_COMPAT', False) and 'comp' or 'core', 'function')
// @set __tpl_functions = {}
// @for f in os.listdir(__tpl_folder):
// @  set __tpl_functions[f] = yaml.load(file(os.path.join(__tpl_folder, f), 'r'))
// @end for

#ifndef __GTULU_OPENGL_API__
#define __GTULU_OPENGL_API__

#include <gtulu/types.hpp>

namespace gtulu {
  namespace api {

    // @for n,f in sorted(__tpl_functions.items()):
    // @  set __tpl_gtulu_params    = ', '.join(['%(type)s %(name)s' % p for p in __tpl_f['gtulu-params']])
    // @  set __tpl_gtulu_return    = __tpl_f['gtulu-return']
    // @  set __tpl_gtulu_name      = lambda x: '%s(%s)' % (f['gtulu-name'], x)
    GTULU_API_EXPORT __tpl_gtulu_return __tpl_gtulu_name(__tpl_gtulu_params);
    // @end for

  } // namespace api
} // namespace gtulu

#endif /* __GTULU_OPENGL_API__ */
