// -*- C++ -*-
// :cheetah --env --nobackup --iext=tcpp --oext=cpp --settings allowWhitespaceAfterDirectiveStartToken=True,cheetahVarStartToken='___',commentStartToken='// \#',directiveStartToken='// :',directiveEndToken=': //',multiLineCommentStartToken='/*\#',multiLineCommentEndToken='\#*/'

// :import os
// :import yaml
// :import gtuluref

// :set (___functions,___constants,___categories) = gtuluref.load(___GTULU_VERSION, ___getVar('GTULU_COMPAT', False))

#define __IN_GTULU_OPENGL_API__
#include <gtulu/api.hpp>
#include <gtulu/error.hpp>
#include <gtulu/logging.hpp>
#include <gtulu/types.h>

namespace gtulu {
  namespace api {

    // :set ___parameter_groups = {}
    // :for f in ___functions:
    // :  if ___f.gtu.get('skip', False):
    // :    continue
    // :  end if
    // :  set ___gl_params       = ', '.join(['%(type)s %(name)s'           % p for p in ___f.gl.params])
    // :  set ___gtu_params      = ', '.join(['%(type)s %(name)s'           % p for p in ___f.gtu.params])
    // :  set ___call_params     = ', '.join(['%(mapping)s'                 % p for p in ___f.gl.params])
    // :  set ___log_params      = ', '.join(['%(name)s:" << %(name)s << "' % p for p in ___f.gtu.params])
    // :  set ___gl_name         = lambda x: '%s(%s)' % (f['gl']['name'], x)
    // :  set ___gtu_name        = lambda x: '%s(%s)' % (f['gtu']['name'], x)
    // :  set ___gl_return       = ___f.gl.return
    // :  set ___gtu_return      = ___f.gtu.return
    // :  set ___out_variable    = ___gl_return != 'void' and '__r' or ''
    // :  set ___out_assign      = ___gl_return != 'void' and '%s __r = ' % (___gl_return) or ''
    // :  set ___assign_variable = lambda x: '%s %s' % (out_assign, x)
    // :  set ___return_variable = 'return %s' % (___gl_return != 'void' and '%s(%s)' % (f['gtu'].get('return-cast', ''), ___out_variable) or '')
    // :  set ___precall         = lambda: f['gtu'].get('precall', '')
    // :  set ___postcall        = lambda: f['gtu'].get('postcall', return_variable)
    // :  set ___check_error     = lambda: f['gl']['name'] != 'glGetError' and 'api::__check_error()' or ''

    extern "C" GTULU_API_IMPORT ___gl_return ___gl_name(___gl_params);
    GTULU_API_EXPORT ___gtu_return ___gtu_name(___gtu_params) {
      __trace() << "call ___gl_name(___log_params)";
      ___precall();
      ___assign_variable(___gl_name(___call_params));
      ___check_error();
      ___postcall();
    } // :slurp

    // :end for

  } // namespace api
} // namespace gtulu
